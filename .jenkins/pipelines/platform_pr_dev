@Library('shared-library') _
pipeline {
    agent any

    parameters {
        string(name: 'env_name', defaultValue: 'pr', description: 'Execution Environment')
        string(name: 'use_case_base_path', defaultValue: 'named_entity_recognition')
        string(name: 'rg_name', description: 'Azure Resource Group Name')
        string(name: 'ws_name', description: 'AzureML Workspace Name')
    }
    
    environment {
        RESOURCE_GROUP_NAME = "${rg_name}"
        WORKSPACE_NAME = "${ws_name}"
        AZURE_CREDENTIALS = credentials('AZURE_CREDENTIALS')
        ENV_VARS = credentials('ENV_VARS')
    }

    stages {

        //Configure AzureML agent which process necessary requirements
        stage('Configure Azure ML Agent') {
            steps {
                azureLogin()
                script {
                    build job: 'jobs/configure_azureml_agent', parameters: [
                        string(name: 'use_case_base_path', value: "${params.use_case_base_path}")
                    ]
                }
            }
        }

        // Create .env file and load the current Azure subscription details
        stage('Prepare Environment and Azure Subscription Details') {
            steps {
                installRequirements('execute_job_requirements')
                withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
                    withPythonEnv('/usr/bin/python3.9') {
                    // Create .env file with environment variables
                    sh 'echo "$env.ENV_VARS" > .env'

                    // Ensure the dotenv library is installed
                    sh 'pip install python-dotenv'

                    // Load .env file using Python
                    sh 'python -c "from dotenv import load_dotenv; load_dotenv()"'

                    // Echo the contents of the .env file again to show the added subscription ID
                    sh 'cat .env'
                }
            }

            }
        }

        // Run PR code validation
        stage('PR Code Validation') {
            steps {
                script {
                    build job: 'jobs/build_validation', parameters: [
                        string(name: 'use_case_base_path', value: "${params.use_case_base_path}")
                    ]
                }
            }
        }

        // Register PR data asset in AzureML
        stage('Register experiment data asset') {
            steps {
                installRequirements('execute_job_requirements')
                withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
                    withPythonEnv('/usr/bin/python3.9') {
                    sh """
                    python -m llmops.common.register_data_asset \\
                    --subscription_id $AZURE_SUBSCRIPTION_ID \\
                    --base_path $use_case_base_path \\
                    --env_name $env_name
                    """
                    }
                }
            }
        }

        // Install requirements for build validation and execute prompt flow bulk run
        stage('Execute prompt flow bulk run') {
            steps {
                installRequirements('build_validation_requirements')
                withCredentials([azureServicePrincipal('AZURE_CREDENTIALS')]) {
                    withPythonEnv('/usr/bin/python3.9') {
                    sh '''
                    python -m llmops.common.prompt_pipeline \\
                    --subscription_id $AZURE_SUBSCRIPTION_ID \\
                    --base_path $use_case_base_path \\
                    --build_id $BUILD_NUMBER \\
                    --env_name $env_name \\
                    --output_file run_id.txt
                    '''
                }
            }
            }
        }
    }
}